<?php
/***********************************************/
# Company Name    :                             
                        
# Created Date    :                                
# Controller Name : BusinessController               
# Purpose         : Business Management             
/***********************************************/

namespace App\Http\Controllers\admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;
use App\Http\Controllers\Controller;
use DB;
use Mail;
use App\Helpers\CommonHelper;
use GlobalVars;
use Exception;
use App\Traits\GeneralMethods;
use App\Business;
use App\BusinessImage;
use App\Category;
use App\SubCategory;
use App\City;
use App\Location;

class BusinessController extends Controller
{
    
    use GeneralMethods;
    public $controllerName  = 'Business';
    public $management;
    public $modelName       = '';
    public $breadcrumb;
    public $routePrefix     = 'business';
    public $listUrl         = 'business.list';
    public $viewFolderPath  = 'admin/business';
    
    public function __construct()
    {
        parent::__construct();
        $this->management      = 'Business';
        // Begin: Assign breadcrumb for view pages
        $this->assignBreadcrumb();
        // End: Assign breadcrumb for view pages
        // Variables assign for view page
        $this->assignShareVariables();
        
    }
	
	public function export()
	{
		$headers = [
				'Cache-Control'       => 'must-revalidate, post-check=0, pre-check=0'
			,   'Content-type'        => 'text/csv'
			,   'Content-Disposition' => 'attachment; filename=business.csv'
			,   'Expires'             => '0'
			,   'Pragma'              => 'public'
		];

		$list = Business::all()->toArray();


		# add headers for each column in the CSV download
		array_unshift($list, array_keys($list[0]));

	   $callback = function() use ($list)
		{
			$FH = fopen('php://output', 'w');
			foreach ($list as $row) {
				fputcsv($FH, $row);
			}
			fclose($FH);
		};

		return response()->stream($callback, 200, $headers);
	}
    
    public function index(Request $request)
    {        
       try{
            $data['keyword']        = '';
           // $data['userTypes']                  = ['W'=>'Wholesale','R'=>'Retail'];
            $data['user_type']          = $request->user_type;
            $data['records'] = Business::where('id','!=',1);

            if($request->keyword !=''){
                // search section
                $data['keyword'] = $request->keyword;
                $keywordArray = explode(' ', $data['keyword']);
                
                if(count($keywordArray) == 2){ // If keyword have two words
                     $data['records'] = $data['records']->where(function($q) use ($data, $keywordArray){
                        $q->where('business_name','like','%'.$keywordArray[0].'%')
                     ->where('business_name','like','%'.$keywordArray[1].'%');
                     });                     
                }else{

                     $data['records'] = $data['records']->where(function($q) use ($data){
                        $q->Where('business_name','like','%'.$data['keyword'].'%')
                         ->orWhere('business_email','like','%'.$data['keyword'].'%');
                     });
                }
            }

            if($data['user_type']){
                $data['records'] = $data['records']->where('user_type', $data['user_type']);
            }            

            $data['records'] = $data['records']->orderBy('id','desc')->paginate(GlobalVars::ADMIN_RECORDS_PER_PAGE);

            return view($this->viewFolderPath.'.list', $data);
        }catch(Exception $e){
            throw new \App\Exceptions\AdminException($e->getMessage());
        }
    }

    public function view($id)
    {
        try{ 
            $data['id'] = $id;
			$data['record'] = Business::find($id);
			$data['businessimages'] = BusinessImage::where('business_id', $id)->get();
			
			$data['cityname'] = City::where('id', $data['record']['city'])->first();
			$data['locationname'] = Location::where('id', $data['record']['area'])->first();
			
			$data['catname'] = Category::where('id', $data['record']['business_category'])->first();
			$data['subcatname'] = SubCategory::where('id', $data['record']['business_subcategory'])->first();
			
            if(!$data['record']){
                throw new Exception("No result was found for id: $id");
            }	
            return view($this->viewFolderPath.'.view', $data);
        }catch(Exception $e){
            throw new \App\Exceptions\AdminException($e->getMessage());
        }
    } 
	
	/*public function getCategoryDropDown(Request $request){
    {
		$categories = Category::where('id','!=',1)->get();
        foreach ($categories as $cat) {
            $categoryList .= '<option value='.$cat->id.'>'.$user->category_name.'</option>';
        }
        return $categoryList;
    }*/

    public function add()
    {
        return view($this->viewFolderPath.'.add');
    }
	
	public function edit($id)
    {
        try{
            $data['id'] = $id;
            $data['record'] = Business::find($id);
			$data['city'] = City::where('id','!=','')->get();
			$data['area'] = location::where('city_id', $data['record']['city'])->get();
			$data['businessimages'] = BusinessImage::where('business_id', $id)->get();
			
			$data['category'] = Category::where('id','!=','')->get();
			$data['subcategory'] = SubCategory::where('category_id', $data['record']['business_category'])->get();
            if(!$data['record']){
                throw new Exception("No result was found for id: $id");
            }
            return view($this->viewFolderPath.'.edit', $data);
        }catch(Exception $e){
            throw new \App\Exceptions\AdminException($e->getMessage());
        }      
    }
	
	public function getAreas($id)
	{
		// Fetch Location by City id
        $dataArea['record'] = Location::orderby("location_name","asc")
        			->select('id','location_name')
        			->where('city_id',$id)
        			->get();
  
        return response()->json($dataArea);
	}
	
	public function getSubCategory($id)
	{
		// Fetch Sub Category by Category id
        $dataArea['record'] = SubCategory::orderby("subcategory_name","asc")
        			->select('id','subcategory_name')
        			->where('category_id',$id)
        			->get();
  
        return response()->json($dataArea);
	}
	
	public function imageUpload(Request $request, $business_id)
	{
		$model                      = new BusinessImage;
		$model->business_id       	= $business_id;
        $image      				= $request->fileinfo;
		/*echo "<pre>";
		print_r($image );exit;*/
		
	   $image->getClientOriginalExtension();
	   $destinationPath = 'public/uploads/business_images/'; // upload path
	   $profilefile = 'image_'.time() . "." . $image->getClientOriginalExtension();
	   $image->move($destinationPath, $profilefile);
	   
	   $model->image      = 'image_'.time() . "." . $image->getClientOriginalExtension();
	   $model->save();exit;
	}
	
	public function imageDelete($remove_id)
	{
		
		$model 		= BusinessImage::find($remove_id);
		$oldImgName = $model->image;
		
		$img_directory='business_images';
		$destinationPath = 'public/uploads/'.$img_directory.'/'; // upload path
		if(file_exists($destinationPath.$oldImgName))
		{
			@unlink($destinationPath.$oldImgName);
		}
		
		$model->delete();
		exit;
	}
	
	public function delete($id)
    {
         try{
             $model = Business::find($id);
             $model->delete();
            //return \Redirect::Route($this->listUrl)->with('success', trans('admin_common.record_deleted'));
			return \Redirect::Route($this->listUrl)->with('success', 'Record deleted Successfully');
		 }catch(Exception $e){
             throw new \App\Exceptions\AdminException($e->getMessage());
         }
    }

	public function update(Request $request, $id)
    {
		
		$this->validate(
            $request,
            [
                'business_name'    		=> 'required',
                'business_email'        => 'required|email',
                'business_phone'        => 'required|numeric',
                'business_category'     => 'required',
                'address'     			=> 'required',
                'post_code'     		=> 'required',
                'city'     				=> 'required',
                'area'     				=> 'required',
            ],
            [
                'business_name.required'     	=> 'Business Name is Required',
                'business_email.required'       => 'Business Email is Required',
                'business_phone.required'       => 'Business Phone is Required',
                'business_category.required'    => 'Business Category is Required',
                'address.required'    			=> 'Business Address is Required',
                'city.required'    				=> 'Business City is Required',
                'area.required'    				=> 'Business Location is Required',
            ]
        );
        try{
            $model = Business::find($id);
            $model->business_name       = $request->business_name;
            $model->business_email      = $request->business_email;
            $model->business_phone      = $request->business_phone;
			$model->business_category   = $request->business_category;
            $model->address             = $request->address;
            $model->post_code           = $request->post_code;
			
			
            $model->business_subcategory    = $request->business_subcategory;
            $model->business_website    	= $request->business_website;
            $model->city    				= $request->city;
            $model->area    				= $request->area;
            $model->search_tag    			= $request->search_tag;
            $model->description    			= $request->description;
            $model->origin    				= $request->origin;
            //$model->featured    			= $request->featured;
            $model->added_by    			= $request->added_by;
            $model->status              	= $request->status;
			
			/*if ($files = $request->file('user_logo')) 
			{
				$destinationPath = 'uploads/business_images/';
				$oldImgName=$model->user_logo;
				if(file_exists($destinationPath.$model->user_logo)){
					@unlink($destinationPath.$oldImgName);
				}
				
			   $files->getClientOriginalExtension();
			   $profilefile = 'image_'.time() . "." . $files->getClientOriginalExtension();
			   $files->move($destinationPath, $profilefile);
			   $insert['file'] = "$profilefile";
			   
			   $model->user_logo      = 'image_'.time() . "." . $files->getClientOriginalExtension();
			}*/
			
            $model->save();
            return \Redirect::Route($this->listUrl)->with('success', 'Record updated Successfully');
        }
		catch(Exception $e){
            throw new \App\Exceptions\AdminException($e->getMessage());
        }        
    }

}